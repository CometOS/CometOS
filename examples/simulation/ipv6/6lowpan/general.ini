sim-time-limit = 614400.00s

repeat=5

# !!!!! NOTE !!!!!
# Delay/macRetryControlModes should contain all options here, a runall.sh script 
# chooses the runs to actually execute from the full set of runs

# 0:DM_NONE, 1:DM_RATE, 2:DM_OWN, 3:DM_ADAPTIVE
**.node[*].low.delayMode = ${DelayMode=3}
**.node[*].low.enableDirectFwd = ${directFwd=true}
            

## deactivate vector recording for not-so-important stats which slow down
## simulation and processing
**.node[*].mac.queueLevel.vector-recording = false
**.node[*].low.FreeIPRequestsVector.vector-recording = false

## !!!!!! NOTE !!!!!!
## as soon as any retry control is used, the mac.macMaxFrameRetries parameter
## is bypassed for lowpan transmission by using a cross layer config object
## retransmission control is in this case solely defined by lowpanconfig.h!!!!
# LOWPAN_MACCONTROL_DEFAULT = 0,
# LOWPAN_MACCONTROL_SRC = 1,
# LOWPAN_MACCONTROL_PRC = 2,
# LOWPAN_MACCONTROL_ASPRC = 3,
# LOWPAN_MACCONTROL_MSPRC = 4,
**.node[*].low.macRetryControlMode = ${RCMode=0}


# MAC parameters
**.node[*].mac.ccaThreshold = ${CCATH=-90dBm}
**.node[*].mac.macCcaMode = ${macCcaMode=0,1}
**.node[*].mac.macMaxFrameRetries = ${macMFR=7}

**.node[*].mac.macMaxCSMABackoffs = ${macMaxBo = 5}
**.node[*].mac.macMinBE = ${macMinBe = 3,5}
**.node[*].mac.macMaxBE = ${macMaxBe = 8}
**.node[*].mac.txWaitsForBusyRx = ${txWaitsForBusyRx = false}

# The thermal noise is chosen according to the receiver sensitivity
# of the used ATmega128RFA1 (-100dBm) for which 22 byte packets shall
# acquire a PER < 1% 
# using the bit error calculation given in the 802.15.4 standard,
# this is achieved for an snr of about 0.442 dB, therefore, we 
# set the thermal noise to -100.5 dBm (with S=-100 dBm, N=-100.442 dBm 
# SNR = S - N --> SNR = -100 dBm - (-100.442 dBm) = 0.442 dB)
# we could also then add up the factor (DCF)
# we artificially lower the SINR in the decider to make things
# even for non-interferring packets. For packets with interference,
# the observerd SINR will be lower
**.node[*].nic.phy.deciderCorrectionFactor = ${DCF=0}
**.node[*].nic.phy.thermalNoise = ${ThermNoise=-100.442dBm + ${DCF} dBm}

**.node[*].tg.mode = ${TrafficInterval = 1}
**.node[*].tg.totalData = ${TD=240000}
**.node[*].tg.payloadSize = ${P=50,1200} # 25, 200, 800
#**.node[*].tg.ratePer256s = ${R=2400/${P},4800/${P},9600/${P}}
**.node[*].tg.ratePer256s = ${R=9600/${P}, 19200/${P}}
#**.node[*].tg.ratePer256s = ${R=12000/${P},14400/${P},16800/${P}}
**.node[*].tg.maxRuns = ${MR=(${TD}) / (${P}) + (${TD}) / (${P})/20}
**.node[*].tg.startWith = ${SW=(${TD}) / 2 / (${P}) / 20}
**.node[*].tg.endWith = ${EW=(${TD}) / (${P}) + (${TD}) / 2 / (${P}) / 20}
**.node[*].tg.param-record-as-scalar = true
**.node[*].tg.splitDatagramInto = ${SI=1}

**.node[0].tg.mTP = false
**.node[0].low.unlimitedBuffer = true

**.node[*].tg.mRTT = false
**.node[*].tg.mTP = true
**.node[*].tg.tpDest = 0

**.node[*].low.congestionControlType = ${cct=0, 1}
**.node[*].localCongestionControlType = ${loccType ="NoCC", "LowpanOrderedForwarding"}
**.node[*].low.queueType = ${queueType = 0, 1}
**.node[*].low.timeoutMs = ${timeoutMs = 10000, 20000}
**.node[*].locc.minBe = ${loccMinBe = 1}
**.node[*].locc.maxBe = ${loccMaxBe = 5}
**.node[*].locc.maxNumSentWithoutConfirmation = ${loccMnswc = 1}

**.node[0].low.numDirectDatagramHandlers = ${numDirectDatagramHandlersBs = 255}
**.node[0].low.numReassemblyHandlers = ${numReassemblyHandersBs = 255}
**.node[0].low.numBufferHandlers = ${numBufferHandlersBs = 255}
**.node[0].low.bufferSize = ${LowpanBufferSizeBs=20000}

**.node[*].low.bufferSize = ${LowpanBufferSize=1280,1920,2560}
**.node[*].low.numDirectDatagramHandlers = ${numDirectDatagramHandlers = 15}
**.node[*].low.numReassemblyHandlers = ${numReassemblyHandlers = 8, 10} #,10
**.node[*].ip.numRequestsToLower = ${ipRequestsToLower = 8, ${numDirectDatagramHandlers}}
**.node[*].ip.numIndicationsToUpper = ${ipIndicationsToUpper = 8}
constraint = ( ($numReassemblyHandlers == 8 && $directFwd) || ($numReassemblyHandlers == 10 && !$directFwd) ) \
                && ( ($queueType == 0 && $cct == 0 && $loccType=="NoCC") || ($queueType == 1 && $cct == 1 && $loccType == "LowpanOrderedForwarding") )\
                && ( ($ipRequestsToLower == 8 && !$directFwd) || ($ipRequestsToLower == $numDirectDatagramHandlers && $directFwd) )

## we determine the number of buffer handlers as number of frames of a size of
## 64 byte which should fit in the buffer -- thereby, we prevent using too many
## or too few buffer handlers during experiments
**.node[*].low.numBufferHandlers = ${numBufferHandlers = ${LowpanBufferSize}/64}