sim-time-limit = 614400.00s

repeat=10

# !!!!! NOTE !!!!!
# Delay/macRetryControlModes should contain all options here, a runall.sh script 
# chooses the runs to actually execute from the full set of runs

# 0:DM_NONE, 1:DM_RATE, 2:DM_OWN, 3:DM_ADAPTIVE
**.node[*].low.delayMode = ${DelayMode=0,1,2,3}

## deactivate vector recording for not-so-important stats which slow down
## simulation and processing
**.node[*].mac.queueLevel.vector-recording = false
**.node[*].low.FreeIPRequestsVector.vector-recording = false

## !!!!!! NOTE !!!!!!
## as soon as any retry control is used, the mac.macMaxFrameRetries parameter
## is bypassed for lowpan transmission by using a cross layer config object
## retransmission control is in this case solely defined by lowpanconfig.h!!!!
# LOWPAN_MACCONTROL_DEFAULT = 0,
# LOWPAN_MACCONTROL_SRC = 1,
# LOWPAN_MACCONTROL_PRC = 2,
# LOWPAN_MACCONTROL_ASPRC = 3,
# LOWPAN_MACCONTROL_MSPRC = 4,
**.node[*].low.macRetryControlMode = ${RCMode=0,1,2,3,4}


# MAC parameters
**.node[*].mac.ccaThreshold = ${CCATH=-90dBm}

**.node[*].mac.macCcaMode = ${macCcaMode=0,1,3}
**.node[*].mac.macMaxFrameRetries = ${macMFR=7}
**.node[*].mac.macMaxCSMABackoffs = ${macMaxBo = 5}
**.node[*].mac.macMinBE = ${macMinBe = 5,6}
**.node[*].mac.macMaxBE = ${macMaxBe = 7,8}
**.node[*].mac.txWaitsForBusyRx = ${txWaitsForBusyRx = false}

# The thermal noise is chosen according to the receiver sensitivity
# of the used ATmega128RFA1 (-100dBm) for which 22 byte packets shall
# acquire a PER < 1% 
# using the bit error calculation given in the 802.15.4 standard,
# this is achieved for an snr of about 0.442 dB, therefore, we 
# set the thermal noise to -100.5 dBm (with S=-100 dBm, N=-100.442 dBm 
# SNR = S - N --> SNR = -100 dBm - (-100.442 dBm) = 0.442 dB)
# we could also then add up the factor (DCF)
# we artificially lower the SINR in the decider to make things
# even for non-interferring packets. For packets with interference,
# the observerd SINR will be lower
**.node[*].nic.phy.deciderCorrectionFactor = ${DCF=0}
**.node[*].nic.phy.thermalNoise = ${ThermNoise=-100.442dBm + ${DCF} dBm}


**.node[0].mtcp.isMaster = true
**.node[0].mtcp.numCollections = ${numCollections=200}
**.node[0].mtcp.targetsFile = xmldoc("../cfg/RealSim_2014-11/2014-11-21_txp=136_fsize=96_links.xml")

**.node[0].tg.totalData = ${TD=1200}
**.node[0].tg.payloadSize = ${P=1200}
**.node[0].tg.ratePer256s = ${R=9600/${P}}
**.node[0].tg.splitDatagramInto = ${SI=1}
**.node[0].tg.maxRuns = ${MR=${numCollections}}
**.node[0].tg.startWith = ${SW=0}
**.node[0].tg.endWith = ${EW=${numCollections}-1}
**.node[0].tg.mRTT = false
**.node[0].tg.mTP = false
**.node[0].tg.tpDest = 0

**.node[*].tg.mode = ${TrafficInterval = 0}
**.node[*].tg.totalData = ${TD}
**.node[*].tg.payloadSize = ${P}
**.node[*].tg.ratePer256s = ${R}
**.node[*].tg.splitDatagramInto = ${SI}
**.node[*].tg.maxRuns = ${MR}
**.node[*].tg.startWith = ${SW}
**.node[*].tg.endWith = ${EW}
**.node[*].tg.mRTT = false
**.node[*].tg.mTP = false
**.node[*].tg.tpDest = 0

**.node[0].low.mEntries = 255
**.node[0].low.bufferSize = ${LowpanBufferSizeBs=20000}
**.node[0].low.enableLFFR = false
## we determine the number of buffer handlers as number of frames of a size of
## 64 byte which should fit in the buffer -- thereby, we prevent using too many
## or too few buffer handlers during experiments
**.node[*].low.bufferSize = ${LowpanBufferSize=1280}
**.node[*].low.mEntries = ${bHandlers=${LowpanBufferSize}/64}
**.node[*].low.minDelayNominator = ${delayNom=3,2,5}
## parallel iteration to get only 
**.node[*].low.minDelayDenominator = ${delayDenom=2,1,2 ! delayNom} 